#!/bin/bash

#############################################
# Router VM Management Script
# Description: Start, stop, and manage router VMs
#############################################

set -u
set -o pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly VM_BASE_DIR="$SCRIPT_DIR/router_vms"

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

list_vms() {
    echo -e "${BLUE}Router Virtual Machines:${NC}"
    virsh list --all
}

start_all() {
    log_info "Starting all VMs..."
    for vm in $(virsh list --all --name); do
        if [ -n "$vm" ]; then
            log_info "Starting $vm..."
            virsh start "$vm" 2>/dev/null || log_error "Failed to start $vm"
        fi
    done
}

stop_all() {
    log_info "Stopping all VMs..."
    for vm in $(virsh list --state-running --name); do
        if [ -n "$vm" ]; then
            log_info "Stopping $vm..."
            virsh shutdown "$vm" 2>/dev/null || log_error "Failed to stop $vm"
        fi
    done
}

start_vm() {
    local vm_name="$1"
    
    if virsh list --state-running --name | grep -q "^${vm_name}$"; then
        log_info "$vm_name is already running"
        return 0
    fi
    
    log_info "Starting $vm_name..."
    virsh start "$vm_name" || log_error "Failed to start $vm_name"
}

stop_vm() {
    local vm_name="$1"
    
    if ! virsh list --state-running --name | grep -q "^${vm_name}$"; then
        log_info "$vm_name is not running"
        return 0
    fi
    
    log_info "Stopping $vm_name..."
    virsh shutdown "$vm_name" || log_error "Failed to stop $vm_name"
}

show_info() {
    local vm_name="$1"
    echo -e "${BLUE}VM Information for: $vm_name${NC}"
    virsh dominfo "$vm_name"
    
    if [ -f "$VM_BASE_DIR/${vm_name}.firmware" ]; then
        echo -e "${BLUE}Firmware:${NC} $(cat $VM_BASE_DIR/${vm_name}.firmware)"
    fi
}

delete_vm() {
    local vm_name="$1"
    log_info "Deleting $vm_name..."
    
    virsh shutdown "$vm_name" 2>/dev/null
    sleep 2
    
    virsh destroy "$vm_name" 2>/dev/null
    
    virsh undefine "$vm_name" --remove-all-storage 2>/dev/null || log_error "Failed to delete $vm_name"
    
    rm -f "$VM_BASE_DIR/${vm_name}.firmware"
}

usage() {
    cat << EOF
Usage: $0 [COMMAND] [VM_NAME]

Commands:
    list                List all VMs
    start-all           Start all VMs
    stop-all            Stop all VMs
    start <vm-name>     Start specific VM
    stop <vm-name>      Stop specific VM
    info <vm-name>      Show VM information
    delete <vm-name>    Delete specific VM
    help                Show this help message

Examples:
    $0 list
    $0 start-all
    $0 start router1_mikrotik
    $0 info router1_mikrotik
    $0 delete router1_mikrotik

EOF
}

case "${1:-}" in
    list)
        list_vms
        ;;
    start-all)
        start_all
        ;;
    stop-all)
        stop_all
        ;;
    start)
        if [ -z "${2:-}" ]; then
            log_error "VM name required"
            usage
            exit 1
        fi
        start_vm "$2"
        ;;
    stop)
        if [ -z "${2:-}" ]; then
            log_error "VM name required"
            usage
            exit 1
        fi
        stop_vm "$2"
        ;;
    info)
        if [ -z "${2:-}" ]; then
            log_error "VM name required"
            usage
            exit 1
        fi
        show_info "$2"
        ;;
    delete)
        if [ -z "${2:-}" ]; then
            log_error "VM name required"
            usage
            exit 1
        fi
        delete_vm "$2"
        ;;
    help|--help|-h|"")
        usage
        ;;
    *)
        log_error "Unknown command: ${1:-}"
        usage
        exit 1
        ;;
esac
